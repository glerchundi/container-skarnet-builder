#!/usr/bin/env bash
set -e

THISDIR=$(pwd)

MUSL_CROSS_MAKE_RELEASE=15
MUSL_CROSS_MAKE_SRC="https://github.com/just-containers/musl-cross-make/releases/download/v${MUSL_CROSS_MAKE_RELEASE}"

TRAVIS_TOOLS_RELEASE=1.0.0
TRAVIS_TOOLS="https://github.com/jprjr/travis-tools/releases/download/${TRAVIS_TOOLS_RELEASE}/travis-tools-linux.tar.xz"
TRAVIS_TOOLS_TAR="$(basename $TRAVIS_TOOLS)"

DOWNLOADDIR=$THISDIR/downloads
BUILDDIR=$THISDIR/build
PACKAGEDIR=$THISDIR/pkg
DISTDIR=$THISDIR/dist
PATCHDIR=$THISDIR/patches
SYSDEPSDIR=$THISDIR/sysdeps

dl() {
  url=$1
  dest=$2
  if [[ -z "$dest" ]] ; then
    dest="$DOWNLOADDIR/$(basename $url)"
  fi
  printf "Downloading $(basename $url)\n"
  curl -s -R -L -o "$dest" "$url"
}


mkdir -p "$DOWNLOADDIR" "$BUILDDIR" "$PACKAGEDIR" "$DISTDIR" "$SYSDEPSDIR"

RUNLOG="$PACKAGEDIR/local/bin/runlog"

# all packages
skarnet_all_packages=(
skalibs
execline
s6
s6-portable-utils
s6-linux-utils
s6-dns
s6-networking
s6-rc
s6-linux-init
)

# linux packages
skarnet_linux_packages=("${skarnet_all_packages[@]}")

# portable packages
skarnet_portable_packages=(
skalibs
execline
s6
s6-portable-utils
s6-rc
)

targets_order=(
'i486-linux-musl'
'x86_64-linux-musl'
'aarch64-linux-musl'
'arm-linux-musleabi'
'arm-linux-musleabihf'
'powerpc64le-linux-musl'
)

# target platforms + simplified
declare -A targets
targets[arm-linux-musleabi]=arm
targets[arm-linux-musleabihf]=armhf
targets[aarch64-linux-musl]=aarch64
targets[x86_64-linux-musl]=amd64
targets[i486-linux-musl]=x86
targets[powerpc64le-linux-musl]=ppc64le

# software versions
declare -A versions
versions[skalibs]=2.11.0.0
versions[execline]=2.8.1.0
versions[s6]=2.11.0.0
versions[s6-portable-utils]=2.2.3.3
versions[s6-linux-utils]=2.5.1.6
versions[s6-dns]=2.3.5.2
versions[s6-networking]=2.5.0.0
versions[s6-rc]=0.5.2.3
versions[s6-linux-init]=1.0.6.4

declare -A manifests
manifests[skarnet_all_packages]="manifest.txt"
manifests[skarnet_linux_packages]="manifest-linux.txt"
manifests[skarnet_portable_packages]="manifest-portable.txt"

dl "${MUSL_CROSS_MAKE_SRC}/gcc-7.3.0-manifest.txt"

while read -r line; do
    key=$(echo "${line}" | cut -d"=" -f1)
    value=$(echo "${line}" | cut -d"=" -f2)
    case "${key}" in
        linux|musl|gcc) versions[$key]=$value ;;
    esac
done < $DOWNLOADDIR/gcc-7.3.0-manifest.txt

rm $DOWNLOADDIR/gcc-7.3.0-manifest.txt

for package in "${skarnet_all_packages[@]}"; do
  dl "http://skarnet.org/software/${package}/${package}-${versions[$package]}.tar.gz"
done

mkdir -p $PACKAGEDIR/local

dl "${TRAVIS_TOOLS}"
tar xf "${DOWNLOADDIR}/${TRAVIS_TOOLS_TAR}" -C ${PACKAGEDIR}/local

for target in "${targets_order[@]}"; do
    mkdir -p "$SYSDEPSDIR/${target}"

    declare -A includes
    includes[skalibs]=""
    includes[execline]="--with-include=$PACKAGEDIR/skalibs-$target/usr/include ${includes[skalibs]}"
    includes[s6]="--with-include=$PACKAGEDIR/execline-$target/usr/include ${includes[execline]}"
    includes[s6-portable-utils]="${includes[s6]}"
    includes[s6-linux-utils]="${includes[s6]}"
    includes[s6-dns]="${includes[s6]}"
    includes[s6-networking]="--with-include=$PACKAGEDIR/s6-dns-$target/usr/include --with-include=$PACKAGEDIR/s6-$target/usr/include ${includes[s6]}"
    includes[s6-rc]="--with-include=$PACKAGEDIR/s6-$target/usr/include ${includes[s6]}"
    includes[s6-linux-init]="--with-include=$PACKAGEDIR/s6-$target/usr/include ${includes[s6]}"

    declare -A libs
    libs[skalibs]=""
    libs[execline]="--with-lib=$PACKAGEDIR/skalibs-$target/usr/lib ${libs[skalibs]}"
    libs[s6]="--with-lib=$PACKAGEDIR/execline-$target/usr/lib ${libs[execline]}"
    libs[s6-portable-utils]="${libs[s6]}"
    libs[s6-linux-utils]="${libs[s6]}"
    libs[s6-dns]="${libs[s6]}"
    libs[s6-networking]="--with-lib=$PACKAGEDIR/s6-dns-$target/usr/lib --with-lib=$PACKAGEDIR/s6-${target}/usr/lib ${libs[s6]}"
    libs[s6-rc]="--with-lib=$PACKAGEDIR/s6-$target/usr/lib ${libs[s6]}"
    libs[s6-linux-init]="--with-lib=$PACKAGEDIR/s6-$target/usr/lib ${libs[s6]}"

    declare -A sysdeps
    sysdeps[skalibs]=""
    sysdeps[execline]="--with-sysdeps=$PACKAGEDIR/skalibs-$target/usr/lib/skalibs/sysdeps"
    sysdeps[s6]="${sysdeps[execline]}"
    sysdeps[s6-portable-utils]="${sysdeps[execline]}"
    sysdeps[s6-linux-utils]="${sysdeps[execline]}"
    sysdeps[s6-dns]="${sysdeps[execline]}"
    sysdeps[s6-networking]="${sysdeps[execline]}"
    sysdeps[s6-rc]="${sysdeps[execline]}"
    sysdeps[s6-linux-init]="${sysdeps[execline]}"

    declare -A configopts
    configopts[skalibs]="--datadir=/etc --with-sysdep-devurandom=yes"
    configopts[execline]=""
    configopts[s6]=""
    configopts[s6-portable-utils]=""
    configopts[s6-dns]=""
    configopts[s6-networking]=""
    configopts[s6-rc]=""
    configopts[s6-linux-init]=""

    build_install_skarnet_package() { # {{{
        local package=$1
        local version=${versions[$package]}
        printf "Building ${package}-${version} for ${target}\n"

        mkdir -p "$BUILDDIR/${target}"
        cd "$BUILDDIR/${target}"

        tar xf "$DOWNLOADDIR/$package-${versions[$package]}.tar.gz" \
          -C "$BUILDDIR/${target}"

        cd "$BUILDDIR/${target}/${package}-${versions[$package]}"

        rm -f "/tmp/${package}-${target}-configure.txt" \
              "/tmp/${package}-${target}-make.txt" \
              "/tmp/${package}-${target}-install.txt"

        export CC="${target}-gcc"
        export AR="${target}-ar"

        PATH="$PACKAGEDIR/gcc-$target/bin:$PATH" \
        "${RUNLOG}" -l "/tmp/${package}-${target}-configure.txt" -- \
        ./configure \
          --target="$target" \
          --libdir=/usr/lib \
          --enable-static \
          --disable-shared \
          --enable-static-libc \
          ${includes[$package]} \
          ${libs[$package]} \
          ${sysdeps[$package]} \
          ${configopts[$package]} > /dev/null

        PATH="$PACKAGEDIR/gcc-$target/bin:$PATH" \
        "${RUNLOG}" -l "/tmp/${package}-${target}-make.txt" -- \
        make -j > /dev/null

        PATH="$PACKAGEDIR/gcc-$target/bin:$PATH" \
        "${RUNLOG}" -l "/tmp/${package}-${target}-install.txt" -- \
        make DESTDIR="$PACKAGEDIR/${package}-${target}" install >/dev/null
    } # }}}

    tar_skarnet_package() { # {{{
        local package=$1
        for bindir in 'usr/bin' 'bin' 'usr/sbin' 'sbin'; do
            if [[ -d "$PACKAGEDIR/${package}-${target}/$bindir" ]]; then
                PATH="$PACKAGEDIR/gcc-$target/bin:$PATH" find "$PACKAGEDIR/${package}-${target}/$bindir" -type f -exec ${target}-strip {} \;
            fi
        done
    
        tar -czf "$DISTDIR/${package}-${versions[$package]}-linux-${targets[$target]}-bin.tar.gz" \
          --owner 0 \
          --group 0 \
          --exclude "usr/lib" \
          --exclude "usr/include" \
          -C "$PACKAGEDIR/${package}-${target}" .
    
        local dev_dirs=""
        if [[ -d "$PACKAGEDIR/${package}-${target}/usr/lib" ]]; then
            dev_dirs="usr/lib"
        fi
        if [[ -d "$PACKAGEDIR/${package}-${target}/usr/include" ]]; then
            dev_dirs="${dev_dirs} usr/include"
        fi
        if [[ -n "${dev_dirs}" ]]; then
            tar -czf "$DISTDIR/${package}-${versions[$package]}-linux-${targets[$target]}-dev.tar.gz" \
              --owner 0 \
              --group 0 \
            -C "$PACKAGEDIR/${package}-${target}" $dev_dirs
        fi
    } # }}}

    # get gcc
    mkdir -p "$PACKAGEDIR/gcc-${target}"
    dl "${MUSL_CROSS_MAKE_SRC}/gcc-${versions[gcc]}-${target}.tar.xz"
    tar xf "$DOWNLOADDIR/gcc-${versions[gcc]}-${target}.tar.xz" -C "$PACKAGEDIR/gcc-${target}"

    # install skarnet packages
    for package in "${skarnet_all_packages[@]}"; do
        build_install_skarnet_package ${package}
        tar_skarnet_package ${package}
    done
done

# generate release.md
releasemsg=""
releasemsg+="Built using \`musl-${versions[musl]}\` and \`linux-headers-${versions[linux]}\`\n"
releasemsg+="\n"
releasemsg+="| Software | Version |\n"
releasemsg+="| -------- |:-------:|\n"
for package in "${skarnet_all_packages[@]}"; do
  releasemsg+="| ${package} | ${versions[${package}]} |\n"
done
releasemsg+="\n"
echo -e ${releasemsg} > $DISTDIR/release.md

# generate manifests
for i in "${!manifests[@]}"; do
  manifest=""
  packages="$i[@]"
  for package in "${!packages}"; do
    manifest+="${package}=${versions[${package}]}\n"
  done
  echo -e ${manifest} > $DISTDIR/${manifests[${i}]}
done

printf 'Done building!\n'
